from Core.Databases import info_settings, info_user, add_user, existence_user, user_chage_Balance, Chage_User_function_status, DB_CONFIG, execute_query, add_logs
from Core.keyboards import *

# –•—Ä–∞–Ω–∏–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ—Ç–¥–µ–ª—å–Ω–æ
user_b_id = {}  # –§–æ—Ä–º–∞—Ç: {user_id: target_user_id}
amout_b = {}    # –§–æ—Ä–º–∞—Ç: {user_id: amount}

async def BtnCommands(message, bot, user_id):
    from Core.Commands import back, pay_summa_balance

    function_status = await info_user(user_id, 3)
    
    if message.text == "–ù–∞–∑–∞–¥ üîô":
        await back(message, bot)

    # –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞
    elif function_status == "pay_balance":
        if message.text.isdigit():
            await Chage_User_function_status(user_id, None)
            await pay_summa_balance(message, bot)
        else:
            await bot.send_message(user_id, f"–ù–µ–≤–µ—Ä–Ω–æ–µ —á–∏—Å–ª–æ")

    # –†–∞—Å—Å—ã–ª–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
    elif function_status == "send_message_all":
        user_results = await execute_query("SELECT * FROM users WHERE user_id IS NOT NULL")
        for user_row in user_results:
            await bot.send_message(user_row[0], f"{str(message.text)}")
        await Chage_User_function_status(user_id, None)
        await add_logs("Admin_Send_All_Message", f"user_id: {user_id}, —Å–¥–µ–ª–∞–ª —Ä–∞—Å—Å—ã–ª–∫—É –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º —Å —Ç–µ–∫—Å—Ç–æ–º: '{str(message.text)}'")

    # –ò–∑–º–µ–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ (–ê–¥–º–∏–Ω–∫–∞)
    elif function_status == "change_balance_user_id":
        try:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–≤–µ–¥—ë–Ω–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–ª–æ–≤–∞—Ä—å —Å –∫–ª—é—á–æ–º user_id
            user_b_id[user_id] = message.text  # user_id (–∞–¥–º–∏–Ω–∞) -> target_user_id (–∫–æ–≥–æ –º–µ–Ω—è–µ–º)
            
            if await existence_user(user_b_id[user_id]):
                await bot.send_message(user_id, "–£–∫–∞–∂–∏—Ç–µ –∂–µ–ª–∞–µ–º—ã–π –±–∞–ª–∞–Ω—Å")
                await Chage_User_function_status(user_id, "change_balance_user_amout")
            else:
                await bot.send_message(user_id, "–ù–µ–≤–µ—Ä–Ω—ã–π ID")
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –≤ change_balance_user_id: {e}")
            await back(message, bot)

    elif function_status == "change_balance_user_amout":
        try:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—É–º–º—É –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ user_id (–∞–¥–º–∏–Ω–∞)
            amout_b[user_id] = message.text
            
            print(f"user_b_id: {user_b_id}")
            print(f"amout_b: {amout_b}")
            
            if amout_b[user_id].isdigit():
                # –ú–µ–Ω—è–µ–º –±–∞–ª–∞–Ω—Å target_user_id (user_b_id[user_id]) –Ω–∞ amout_b[user_id]
                await user_chage_Balance(int(user_b_id[user_id]), int(amout_b[user_id]))
                await bot.send_message(
                    user_id,
                    f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_b_id[user_id]} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –±–∞–ª–∞–Ω—Å: {amout_b[user_id]}",
                    reply_markup=await keyboard_start(user_id)
                )
                await Chage_User_function_status(user_id, None)
                await add_logs("Admin_Change_Balance_User", f"user_id: {user_id}, —É—Å—Ç–∞–Ω–æ–≤–∏–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_b_id[user_id]} –±–∞–ª–∞–Ω—Å: {amout_b[user_id]}")
                
                # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ—Å–ª–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
                user_b_id.pop(user_id, None)
                amout_b.pop(user_id, None)
            else:
                await bot.send_message(user_id, "–ù–µ–≤–µ—Ä–Ω–æ–µ —á–∏—Å–ª–æ")
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –≤ change_balance_user_amout: {e}")
            await back(message, bot)