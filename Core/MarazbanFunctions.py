import asyncio
from marzban import MarzbanAPI, UserCreate, ProxySettings
from Core.Databases import add_logs, info_settings, info_user


# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è API
api = MarzbanAPI(base_url="https://fin-01.kadtale.site")

# –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞
async def get_token():
    token = await api.get_token(username="mtadmin", password="jQrtP4bzaDfCXosJ8q3MX5wLHasesj8")
    return token

# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async def mAddUser(user_id):
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω
        token = await get_token()
        if not hasattr(token, "access_token"):
            print("–û—à–∏–±–∫–∞: —Ç–æ–∫–µ–Ω –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç access_token")
            return



        new_user = UserCreate(
            username=f"{user_id}",  # –£–Ω–∏–∫–∞–ª—å–Ω–æ–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            proxies={
                "vless": ProxySettings(flow="xtls-rprx-vision"),  # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ–∫—Å–∏
            },
            status="active",  # –°—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, "active" –∏–ª–∏ "disabled")
            data_limit=0,  # –õ–∏–º–∏—Ç –¥–∞–Ω–Ω—ã—Ö (0 ‚Äî –±–µ–∑ –ª–∏–º–∏—Ç–∞)
            expire=0,  # –°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è (0 ‚Äî –±–µ—Å—Å—Ä–æ—á–Ω–æ)
            data_limit_reset_strategy="no_reset",  # –°—Ç—Ä–∞—Ç–µ–≥–∏—è —Å–±—Ä–æ—Å–∞ –ª–∏–º–∏—Ç–∞ –¥–∞–Ω–Ω—ã—Ö
            inbounds={"vless": ["VLESS TCP REALITY"]},  # –í—Ö–æ–¥—è—â–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        )

        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        added_user = await api.add_user(user=new_user, token=token.access_token)
        print("–î–æ–±–∞–≤–ª–µ–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:", added_user)
        await add_logs("Marzban_Registration", f"user_id: {user_id}, –¥–æ–±–∞–≤–ª–µ–Ω –≤ Marzban, Balance: {await info_user(user_id, 1)}")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")





# –£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async def mDelUser(user_id):
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω
        token = await get_token()
        if not hasattr(token, "access_token"):
            print("–û—à–∏–±–∫–∞: —Ç–æ–∫–µ–Ω –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç access_token")
            return
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await api.remove_user(username=f"{user_id}", token=token.access_token)
        print("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–¥–∞–ª—ë–Ω.")
        await add_logs("Marzban_Delete", f"user_id: {user_id}, —É–¥–∞–ª—ë–Ω –∏–∑ Marzban, Balance: {await info_user(user_id, 1)}")

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")

async def mGetKayUser(user_id):
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω
        token = await get_token()
        if not hasattr(token, "access_token"):
            print("–û—à–∏–±–∫–∞: —Ç–æ–∫–µ–Ω –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç access_token")
            return

        user_info = await api.get_user(username=f"{user_id}", token=token.access_token)

        return f"–í–∞—à –∫–ª—é—á üîë\n{await info_settings(3)}{user_info.subscription_url}"
    except:    
        print("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
        return "–í—ã –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã –∫ —Ç–∞—Ä–∏—Ñ—É üòü"


async def mChangeStatusUser(user_id):
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω
        token = await get_token()
        if not hasattr(token, "access_token"):
            print("–û—à–∏–±–∫–∞: —Ç–æ–∫–µ–Ω –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç access_token")
            return

        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        new_user = UserCreate(
            username=f"{user_id}",
            proxies={"vless": ProxySettings(flow="xtls-rprx-vision")}
        )

        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        added_user = await api.add_user(user=new_user, token=token.access_token)
        print("–î–æ–±–∞–≤–ª–µ–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:", added_user)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")

async def mGet_Data_Info_User(user_id):
        # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω
        token = await get_token()
        if not hasattr(token, "access_token"):
            print("–û—à–∏–±–∫–∞: —Ç–æ–∫–µ–Ω –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç access_token")
            return

        user_info = await api.get_user(username=f"{user_id}", token=token.access_token)

        user_UseData = round(user_info.used_traffic / 1073741824, 2)

        print(user_info.data_limit)

        if user_info.data_limit is None:
            user_DataLimit = "‚àû"
            
        else:
            print(user_info.data_limit)
            user_DataLimit = round(user_info.data_limit / 1073741824, 2)

        return f"–í—ã –ø–æ—Ç—Ä–∞—Ç–∏–ª–∏: {user_UseData} GB –∏–∑ {user_DataLimit} GB"


#asyncio.run(mAddUser("1324016724"))
#asyncio.run(mDelUser("1324016724"))
#print(asyncio.run(mGetKayUser("1324016724")))
#print(asyncio.run(mGet_Data_Info_User("1324016724")))

