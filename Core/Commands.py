import aiosqlite
from telebot.async_telebot import AsyncTeleBot
from Core.keyboards import *
from Core.Databases import *
from Core.text import text
from Core.MarazbanFunctions import mGetKayUser  # –î–æ–±–∞–≤—å—Ç–µ —ç—Ç–æ—Ç –∏–º–ø–æ—Ä—Ç

from telebot import types as async_types

# –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥

async def start_command(message, bot):
    user_id = message.from_user.id
    await add_user(user_id)
    await bot.send_message(message.chat.id, "–í—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!", reply_markup=keyboard_start())
    await bot.send_message(message.chat.id, "–ü—Ä–∏–≤–µ—Ç! –í—ã–±–µ—Ä–∏ –æ–¥–∏–Ω –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –Ω–∏–∂–µ:", reply_markup=keyboard_start())

async def info_vpn_command(message, bot):
    await bot.send_message(message.chat.id, text["info_vpn_command_text"])

async def buy_subscription_command(message, bot):
    await bot.send_message(message.chat.id, text["buy_subscription_command_text"], reply_markup=purchase_a_subscription())

async def help_command(message, bot):
    await bot.send_message(message.chat.id, text["help_command_text"], reply_markup=help_menu())

async def back_command(message, bot):
    await bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏ –æ–¥–∏–Ω –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –Ω–∏–∂–µ:", reply_markup=keyboard_start())

async def invite_friend(message, bot):
    await bot.send_message(message.chat.id, "–í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–∏–≥–ª–∞—Å–∏—Ç—å –¥—Ä—É–≥–∞, –∏ –≤—ã –æ–±–∞ –ø–æ–ª—É—á–∏—Ç–µ –≤–æ–∑–Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏–µ! (–≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ)")

async def vpn_key(message, bot):
    if await info_user(message.from_user.id, 1) != 0:
        kay = await mGetKayUser(message.from_user.id)
        await bot.send_message(message.chat.id, f"{message.from_user.id}     {kay}")
    else:
        await bot.send_message(message.chat.id, "–í—ã –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω—ã")

async def user_balance(message, bot):
    user_id = message.from_user.id
    print(user_id)
    async with aiosqlite.connect('vpn_bot.db') as connection:
        cursor = await connection.cursor()
        await cursor.execute("SELECT * FROM users WHERE user_id = ?", (user_id,))
        results = await cursor.fetchall()
        
        for row in results:
            await bot.send_message(message.chat.id, f"–í–∞—à –ë–∞–ª–∞–Ω—Å: {row[1]}—Ä üí∏")
            print(row[2])

# –°–ª–æ–≤–∞—Ä—å –∫–æ–º–∞–Ω–¥ (—Ç–µ–ø–µ—Ä—å —Ö—Ä–∞–Ω–∏—Ç –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏)
COMMANDS = {
    "/start": start_command,
    "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ VPN üìú": info_vpn_command,
    "–ü–æ–ª—É—á–∏—Ç—å –ö–ª—é—á üîë": vpn_key,
    "–ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å üí∞Ô∏è": buy_subscription_command,
    "–ë–∞–ª–∞–Ω—Å üè¶": user_balance,
    "–ü–æ–º–æ—â—å üõü": help_command,
    "–ù–∞–∑–∞–¥ ‚è™": back_command,
    "–ü–∞—Ä—Ç–Ω–µ—Ä–∫–∞ ü§ù": invite_friend
}

# –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ callback –∫–Ω–æ–ø–æ–∫
async def help_faq(callback, bot):
    await bot.send_message(callback.message.chat.id, "–ß—Ç–æ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?", reply_markup=frequent_questions())
    await bot.delete_message(callback.message.chat.id, callback.message.message_id)

async def payment_problems(callback, bot):
    await bot.send_message(callback.message.chat.id, text["payment_problems_text"], reply_markup=back_to_faq_keyboard())
    await bot.delete_message(callback.message.chat.id, callback.message.message_id)

async def low_speed_problems(callback, bot):
    await bot.send_message(callback.message.chat.id, text["low_speed_problems"], reply_markup=back_to_faq_keyboard())
    await bot.delete_message(callback.message.chat.id, callback.message.message_id)

async def vpn_no_work(callback, bot):
    await bot.send_message(callback.message.chat.id, text["vpn_no_work"], reply_markup=back_to_faq_keyboard())
    await bot.delete_message(callback.message.chat.id, callback.message.message_id)

async def help_install(callback, bot):
    await bot.send_message(callback.message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à—É –û–°:", reply_markup=guide_menu())
    await bot.delete_message(callback.message.chat.id, callback.message.message_id)

async def help_android(callback, bot):
    await bot.send_message(callback.message.chat.id, "–í —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ...")
    await bot.delete_message(callback.message.chat.id, callback.message.message_id)

async def help_apple(callback, bot):
    await bot.send_message(callback.message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ Apple:", reply_markup=apple_menu())
    await bot.delete_message(callback.message.chat.id, callback.message.message_id)

async def help_pc(callback, bot):
    await bot.send_message(callback.message.chat.id, "–í —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ...")
    await bot.delete_message(callback.message.chat.id, callback.message.message_id)

async def help_support(callback, bot):
    await bot.send_message(callback.message.chat.id, "–ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –ø–æ–¥–¥–µ—Ä–∂–∫–∏")
    await bot.delete_message(callback.message.chat.id, callback.message.message_id)

async def help_back(callback, bot):
    await bot.edit_message_text(
        chat_id=callback.message.chat.id,
        message_id=callback.message.message_id,
        text=text["help_command_text"],
        reply_markup=help_menu()
    )

async def back_to_faq(callback, bot):
    await bot.edit_message_text(
        chat_id=callback.message.chat.id,
        message_id=callback.message.message_id,
        text="–ß—Ç–æ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?",
        reply_markup=frequent_questions()
    )

async def help_back_apple(callback, bot):
    await bot.edit_message_text(
        chat_id=callback.message.chat.id,
        message_id=callback.message.message_id,
        text="–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à—É –û–°:",
        reply_markup=guide_menu()
    )

async def pay_delete(callback, bot):
    await bot.delete_message(callback.message.chat.id, callback.message.message_id)

# –°–ª–æ–≤–∞—Ä—å callback-–∫–Ω–æ–ø–æ–∫ (—Ç–µ–ø–µ—Ä—å —Ö—Ä–∞–Ω–∏—Ç –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏)
CALLBACKS = {
    "frequent_questions": help_faq,
    "payment_problems": payment_problems,
    "low_speed_problems": low_speed_problems,
    "vpn_no_work": vpn_no_work,
    "installation_instructions": help_install,
    "help_android": help_android,
    "help_iphone": help_apple,
    "help_pc": help_pc,
    "contact_support": help_support,
    "guide_back": help_back,
    "faq_back": back_to_faq,
    "help_back_apple": help_back_apple,
    "pay_delete": pay_delete,
}

# –û—Å–Ω–æ–≤–Ω–∞—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥ –∏ callback –∫–Ω–æ–ø–æ–∫
async def CommandProcessing(message=None, bot=None, callback=None):
    if message:
        command_function = COMMANDS.get(message.text)
        if command_function:
            await command_function(message, bot)
        else:
            await bot.send_message(message.chat.id, "–í —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ...")

    elif callback and callback.message:
        callback_function = CALLBACKS.get(callback.data)
        if callback_function:
            await callback_function(callback, bot)
        else:
            await bot.send_message(callback.message.chat.id, "–í —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ...")