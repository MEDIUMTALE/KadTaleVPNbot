import asyncio
from yookassa import Payment, Configuration
import uuid
from telebot import types
from telebot.async_telebot import AsyncTeleBot

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ÆKassa
YOOKASSA_SHOP_ID = "1046269"
YOOKASSA_SECRET_KEY = "live_HMstD4JMz_kYwfQr6u3r7MCeUXhV-Off_QdVHXwiEug"
Configuration.account_id = YOOKASSA_SHOP_ID
Configuration.secret_key = YOOKASSA_SECRET_KEY

async def send_payment_sbp(message: types.Message, bot: AsyncTeleBot, amount: float):
    """–°–æ–∑–¥–∞–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞ —á–µ—Ä–µ–∑ –°–ë–ü"""
    try:
        chat_id = message.chat.id
        user_id = message.from_user.id  # –î–æ–±–∞–≤–ª—è–µ–º user_id –¥–ª—è metadata
        
        # –°–æ–∑–¥–∞–µ–º –ø–ª–∞—Ç–µ–∂
        idempotence_key = str(uuid.uuid4())
        payment = Payment.create({
            "amount": {
                "value": f"{amount:.2f}",
                "currency": "RUB"
            },
            "confirmation": {
                "type": "redirect",
                "return_url": "https://t.me/rozkomvpn_bot"
            },
            "capture": True,
            "description": "–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞",
            "metadata": {
                "chat_id": chat_id,
                "user_id": user_id  # –î–æ–±–∞–≤–ª—è–µ–º user_id
            }
        }, idempotence_key)

        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏
        markup = types.InlineKeyboardMarkup()
        markup.row(
            types.InlineKeyboardButton(
                text="üí≥ –û–ø–ª–∞—Ç–∏—Ç—å",
                url=payment.confirmation.confirmation_url
            )
        )
        markup.row(
            types.InlineKeyboardButton(
                text="üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É",
                callback_data=f"check_{payment.id}"
            )
        )

        await bot.send_message(
            chat_id=chat_id,
            text=f"–ü–æ—Å–ª–µ –ø–æ–ª–∞—Ç—ã –±—è–∑–∞—Ç–µ–ª—å–Ω–æ –Ω–∞–∂–º–∏—Ç–µ \"üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É\" ‚ùóÔ∏è\n‚úÖ –î–ª—è –æ–ø–ª–∞—Ç—ã {amount} —Ä—É–±. –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ:",
            reply_markup=markup
        )

        return payment

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞: {e}")
        await bot.send_message(
            chat_id=message.chat.id,
            text="‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )
        return None

async def check_payment_status(payment_id: str) -> str:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞—Ç–µ–∂–∞"""
    try:
        payment = Payment.find_one(payment_id)
        return payment.status
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–ª–∞—Ç–µ–∂–∞: {e}")
        return None