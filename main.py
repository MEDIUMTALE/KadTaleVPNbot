import asyncio
from datetime import datetime
import aiosqlite
from telebot.async_telebot import AsyncTeleBot 
from telebot.types import LabeledPrice, Message
from telebot import types

from Core.Commands import CommandProcessing
from Core.keyboards import keyboard_start

from Core.Databases import *
from Core.MarazbanFunctions import *

from Core.YooKassa import check_payment_status
from yookassa import Payment

token = "7662636396:AAGcWhdrmXkbYFKWkOWYCweQ5WDgsI622W4"
#token = "6120629335:AAF8ERXPC7rCzWccZbKwi1WxODAzqBPObx8"
bot = AsyncTeleBot(token)





#–æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ–±–ª–∞—Ç—ã
@bot.callback_query_handler(func=lambda call: call.data.startswith('check_'))
async def check_payment_callback(call: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–ª–∞—Ç–µ–∂–∞"""
    try:
        if not call or not call.message:
            return

        payment_id = call.data.split('_')[1]
        chat_id = call.message.chat.id
        #user_id = call.message.from_user.id
        
        payment = Payment.find_one(payment_id)

        amout = payment.amount.value
        
        #metadata = getattr(payment, 'metadata', None)  # –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ metadata

        user_id = payment.metadata.get('user_id')

        # –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback
        await bot.answer_callback_query(call.id)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å
        status = await check_payment_status(payment_id)
        
        print(user_id)

        if status == "succeeded":
            # –£–¥–∞–ª—è–µ–º –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            await bot.delete_message(
                chat_id=call.message.chat.id,
                message_id=call.message.message_id
            )
            
            await check_add(payment.id, amout, user_id, payment.created_at, status)

            markup = await keyboard_start(user_id)


            row1 = types.InlineKeyboardButton("üõ† –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ —É—Å—Ç–∞–Ω–æ–≤–∫–µ VPN", callback_data="installation_instructions")

            markup.add(row1)

            await bot.send_message(
                chat_id,
                "‚úÖ –ü–ª–∞—Ç–µ–∂ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω! –ë–∞–ª–∞–Ω—Å –ø–æ–ø–æ–ª–Ω–µ–Ω.",
                reply_markup=markup
            )

            balance = await info_user(user_id, 1) + int(amout)

            await add_logs("Pay_Balance", f"user_id: {user_id}, amount: {int(amout)}—Ä, payment.id: {payment.id}")

            await user_chage_Balance(user_id, balance)
            
            if await mGetKayUser(user_id) == "–í—ã –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã –∫ —Ç–∞—Ä–∏—Ñ—É üòü":
                await mAddUser(user_id)
            
            
        elif status == "pending":
            await bot.send_message(
                chat_id,
                "‚åõ –ü–ª–∞—Ç–µ–∂ –µ—â–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                reply_markup= await keyboard_start(user_id)
            )


        else:
            await check_add(payment.id, amout, user_id, payment.created_at, status)

            await bot.send_message(
                chat_id,
                "‚ùå –ü–ª–∞—Ç–µ–∂ –Ω–µ –±—ã–ª –∑–∞–≤–µ—Ä—à–µ–Ω –∏–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.",
                reply_markup=keyboard_start(user_id)
            )
        print(f"chat_id: {chat_id}\namout: {amout}\nuser_id: {user_id}\npayment.created_at: {payment.created_at}")
    
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ callback: {e}")
        try:
            await bot.send_message(
                chat_id,
                "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–ª–∞—Ç–µ–∂–∞."
            )
        except:
            pass






# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π
@bot.message_handler(func=lambda message: True)
async def handle_buttons(message):
    await CommandProcessing(message, bot)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback-–∑–∞–ø—Ä–æ—Å–æ–≤
@bot.callback_query_handler(func=lambda callback: True)
async def callback_message(callback):
    await CommandProcessing(callback=callback, bot=bot)

async def run_periodically():
    while True:
        await fetch_data(bot)
        await asyncio.sleep(60)

async def run_bot():
    await bot.polling(none_stop=True)

async def main():
    # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á–∏ –¥–ª—è –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
    bot_task = asyncio.create_task(run_bot())
    periodic_task = asyncio.create_task(run_periodically())
    
    # –û–∂–∏–¥–∞–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ–±–µ–∏—Ö –∑–∞–¥–∞—á (—Ö–æ—Ç—è –æ–Ω–∏ –±–µ—Å–∫–æ–Ω–µ—á–Ω—ã–µ)
    await asyncio.gather(bot_task, periodic_task)

if __name__ == "__main__":
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
    # await init_db()  # –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ init_db —Ç–æ–∂–µ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    asyncio.run(main())
