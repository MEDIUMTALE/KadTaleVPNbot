import asyncio
from datetime import datetime
import aiosqlite  # –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –∑–∞–º–µ–Ω–∞ –¥–ª—è sqlite3

from telebot.async_telebot import AsyncTeleBot  # –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è telebot
from telebot.types import LabeledPrice, Message
from telebot import types

from Core.Commands import CommandProcessing
from Core.Databases import *
from Core.MarazbanFunctions import *

from Core.YooKassa import check_payment_status
from yookassa import Payment

token = "7622209066:AAFoZZanqTXQZdK8fwXHqngmcOUAiUHZxpc"
#token = "6120629335:AAF8ERXPC7rCzWccZbKwi1WxODAzqBPObx8"
bot = AsyncTeleBot(token)





#–æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ–±–ª–∞—Ç—ã
@bot.callback_query_handler(func=lambda call: call.data.startswith('check_'))
async def check_payment_callback(call: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–ª–∞—Ç–µ–∂–∞"""
    try:
        if not call or not call.message:
            return

        payment_id = call.data.split('_')[1]
        chat_id = call.message.chat.id
        #user_id = call.message.from_user.id
        
        payment = Payment.find_one(payment_id)

        amout = payment.amount.value
        
        #metadata = getattr(payment, 'metadata', None)  # –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ metadata

        user_id = payment.metadata.get('user_id')

        # –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback
        await bot.answer_callback_query(call.id)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å
        status = await check_payment_status(payment_id)
        
        print(user_id)

        if status == "succeeded":
            # –£–¥–∞–ª—è–µ–º –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            await bot.delete_message(
                chat_id=call.message.chat.id,
                message_id=call.message.message_id
            )

            await bot.send_message(
                chat_id,
                "‚úÖ –ü–ª–∞—Ç–µ–∂ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω! –ë–∞–ª–∞–Ω—Å –ø–æ–ø–æ–ª–Ω–µ–Ω."
            )


            balance = await info_user(user_id, 1) + int(amout)

            await user_chage_Balance(user_id, balance)

            if await mGetKayUser(user_id) == "–í—ã –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã –∫ —Ç–∞—Ä–∏—Ñ—Éüòü":
                await mAddUser(user_id)
            
        elif status == "pending":
            await bot.send_message(
                chat_id,
                "‚åõ –ü–ª–∞—Ç–µ–∂ –µ—â–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            )
        else:
            await bot.send_message(
                chat_id,
                "‚ùå –ü–ª–∞—Ç–µ–∂ –Ω–µ –±—ã–ª –∑–∞–≤–µ—Ä—à–µ–Ω –∏–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞."
            )

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ callback: {e}")
        try:
            await bot.send_message(
                chat_id,
                "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–ª–∞—Ç–µ–∂–∞."
            )
        except:
            pass






# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π
@bot.message_handler(func=lambda message: True)
async def handle_buttons(message):
    await CommandProcessing(message, bot)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback-–∑–∞–ø—Ä–æ—Å–æ–≤
@bot.callback_query_handler(func=lambda callback: True)
async def callback_message(callback):
    await CommandProcessing(callback=callback, bot=bot)

async def fetch_data():
    async with aiosqlite.connect('vpn_bot.db') as connection:
        cursor = await connection.cursor()
        await cursor.execute("SELECT date FROM settings WHERE id = ?", (0,))
        results = await cursor.fetchall()
        
        if results:
            for row in results:
                now = datetime.now()
                day = now.day
                mon = now.month
                year = now.year
                h = now.hour
                m = now.minute


                if row[0] != day:
                    await cursor.execute("UPDATE settings SET date = ? WHERE id = 0", (day,))
                    await connection.commit()
                    print("–î–µ–Ω—å –∏–∑–º–µ–Ω—ë–Ω")

                    await cursor.execute("SELECT * FROM users WHERE user_id IS NOT NULL")
                    user_results = await cursor.fetchall()
                    
                    if user_results:
                        for user_row in user_results:
                            print(user_row[1])

                            print(await info_settings(2))

                            tariffDay = await info_settings(2)

                            balance = user_row[1] - tariffDay
                            balance = max(balance, 0)  # –ó–∞–º–µ–Ω—è–µ–º if balance<=0: balance=0

                            await cursor.execute('''
                                INSERT OR IGNORE INTO logs (type, text, date)
                                VALUES (?, ?, ?)
                            ''', ("NewDayMinusMoney", f"user_id: {user_row[0]}, Money {user_row[1]} - {tariffDay} = {balance}", f"{day}.{mon}.{year}-{h}:{m}"))
                            await connection.commit()
                            
                            await cursor.execute("UPDATE users SET balance = ? WHERE user_id = ?", (balance, user_row[0]))
                            await connection.commit()


                            if await info_user(user_row[0], 1) == 0:
                                await mDelUser(user_row[0])
                                print(f"User id Dell {user_row[0]}")
                            
                                #–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
                                balance = await info_user(user_row[0], 1)
                                tariff = await info_settings(2)

                                days_left = balance / tariff if tariff != 0 else 0
                                                
                                print(f"days_left {days_left}")

                                if days_left >= 1 and days_left!=0:
                                    print(f"Message To Id{user_row[0]}")
                                    await bot.send_message(user_row[0], f"‚ùó‚ùó –£ –≤–∞—Å –æ—Å—Ç–∞–ª–æ—Å—å {days_left:.0f} –¥–Ω–µ–π ‚ùó‚ùó\n\nüö® –ù–µ –∑–∞–±—É–¥—å—Ç–µ –ø—Ä–æ–¥–ª–∏—Ç—å —Ç–∞—Ä–∏—Ñ üö®")
                                elif days_left==0:
                                    print(f"–´Message To Id{user_row[0]}")
                                    await bot.send_message(user_row[0], f"‚ùó‚ùó –£ –≤–∞—Å –æ—Å—Ç–∞–ª–æ—Å—å –∑–∞–∫–æ–Ω—á–∏–ª—Å—è —Ç–∞—Ä–∏—Ñ ‚ùó‚ùó\n\nüö® –ü—Ä–æ–¥–ª–µ–π—Ç–µ —Ç–∞—Ä–∏—Ñ üö®")
                                #

                else:
                    print("–î–µ–Ω—å —Å–æ–≤–ø–∞–¥–∞–µ—Ç")
        else:
            print("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è id = 0")

async def run_periodically():
    while True:
        await fetch_data()
        await asyncio.sleep(60)

async def run_bot():
    await bot.polling(none_stop=True)

async def main():
    # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á–∏ –¥–ª—è –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
    bot_task = asyncio.create_task(run_bot())
    periodic_task = asyncio.create_task(run_periodically())
    
    # –û–∂–∏–¥–∞–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ–±–µ–∏—Ö –∑–∞–¥–∞—á (—Ö–æ—Ç—è –æ–Ω–∏ –±–µ—Å–∫–æ–Ω–µ—á–Ω—ã–µ)
    await asyncio.gather(bot_task, periodic_task)

if __name__ == "__main__":
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
    # await init_db()  # –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ init_db —Ç–æ–∂–µ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    asyncio.run(main())
